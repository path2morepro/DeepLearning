# IMPORTS
import tensorflow as tf
import tf_keras as keras
import tensorflow_probability as tfp

from tf_keras.models import Sequential, Model
from tf_keras.layers import Input, Dense, BatchNormalization, Dropout, Activation
from tf_keras.optimizers import SGD, Adam

from ray import train

# Set seed from random number generator, for better comparisons
from numpy.random import seed
seed(123)

import matplotlib.pyplot as plt

# =======================================
# DNN related function
# =======================================
# DEEP LEARNING MODEL BUILD FUNCTION
def build_DNN(input_shape, n_hidden_layers, n_hidden_units, loss, act_fun='sigmoid', optimizer:str='sgd', learning_rate=0.01, 
            use_bn=False, use_dropout=False, use_custom_dropout=False, print_summary=False, use_variational_layer=False):
    """
    Builds a Deep Neural Network (DNN) model based on the provided parameters.
    
    Parameters:
    input_shape (tuple): Shape of the input data (excluding batch size).
    n_hidden_layers (int): Number of hidden layers in the model.
    n_hidden_units (int): Number of nodes in each hidden layer (here all hidden layers have the same shape).
    loss (keras.losses): Loss function to use in the model.
    act_fun (str, optional): Activation function to use in each layer. Default is 'sigmoid'.
    optimizer (str, optional): Optimizer to use in the model. Default is SGD.
    learning_rate (float, optional): Learning rate for the optimizer. Default is 0.01.
    use_bn (bool, optional): Whether to use Batch Normalization after each layer. Default is False.
    use_dropout (bool, optional): Whether to use Dropout after each layer. Default is False.
    use_custom_dropout (bool, optional): Whether to use a custom Dropout implementation. Default is False.
    
    Returns:
    model (Sequential): Compiled Keras Sequential model.
    """

    # --------------------------------------------
    # === Your code here =========================
    # --------------------------------------------      
    # Setup optimizer, depending on input parameter string
    if optimizer == 'sgd':
        optimizer = eval(optimizer.upper() + f'(learning_rate={learning_rate})')

    # ============================================

    # Setup a sequential model
    model = Sequential()

    # --------------------------------------------
    # === Your code here =========================
    # --------------------------------------------
    # Add layers to the model, using the input parameters of the build_DNN function

    # Add first (Input) layer, requires input shape
    model.add(Input(shape=input_shape))
    kl_weight = 0.01

    # Add remaining layers. These to not require the input shape since it will be infered during model compile
    for i in range(n_hidden_layers):
        if use_variational_layer:
            model.add(tfp.layers.DenseVariational(
                units=n_hidden_units,
                make_posterior_fn=posterior,
                make_prior_fn=prior,
                kl_weight=kl_weight,
                activation=act_fun
            ))
        else:
            model.add(Dense(n_hidden_units, activation = act_fun))
        if use_bn:
            model.add(BatchNormalization())

        if use_custom_dropout:
            model.add(myDropout(0.5))
        elif use_dropout:
            model.add(Dropout(0.5))
    # Add final layer
        if use_variational_layer:
            model.add(tfp.layers.DenseVariational(
                units=1,
                make_posterior_fn=posterior,
                make_prior_fn=prior,
                kl_weight=kl_weight,
                activation="sigmoid"
            ))
        else:
            model.add(Dense(1, activation = "sigmoid"))
    # Compile model
    model.compile(optimizer=optimizer, 
                  loss=loss, 
                  metrics=['accuracy'])

    # ============================================
    # Print model summary if requested
    if print_summary:
        model.summary() 
    
    return model

def train_DNN(config, data, training_config):
    '''
    Train a DNN model based on the provided configuration and data. 
    This is use in the automatic hyperparameter search and follows the format that Ray Tune expects.

    Parameters:
    config (dict): Dictionary with the configuration parameters for the model. This includes the parameters needed to build the model and can be 
                    manually set or generated by Ray Tune.
                    For convenience, the config dictionary also contains the training parameters, such as the number of epochs and batch size.
    data (tuple): Tuple with the training and validation data. The tuple contains the training data (X_train, y_train) and the validation data (X_val, y_val).
    training_config (dict): Dictionary with the training parameters, such as the number of epochs and batch size.
    '''

    # A dedicated callback function is needed to allow Ray Tune to track the training process
    # This callback will be used to log the loss and accuracy of the model during training
    class TuneReporterCallback(keras.callbacks.Callback):
        def __init__(self):
            super(TuneReporterCallback, self).__init__()

        def on_epoch_end(self, epoch, logs=None):
            if logs is None:
                logs = {}
            # Log accuracy, loss, etc. to Ray Tune
            train.report({
                "mean_accuracy": logs.get("accuracy"),  # or logs.get("acc") if using older TF versions
                "mean_loss": logs.get("loss"),
                "val_accuracy": logs.get("val_accuracy"),
                "val_loss": logs.get("val_loss"),
            })

    X_train, y_train, X_val, y_val = data
    model = build_DNN(**config)
    model.fit(
        X_train,
        y_train,
        validation_data=(X_val, y_val),
        epochs=training_config.get("epochs", 10),
        batch_size=training_config.get("batch_size", 32),
        callbacks=[TuneReporterCallback()],
        verbose=0
    )


# CUSTOM DROPOUT IMPLEMENTATION
# Code from https://github.com/keras-team/tf-keras/issues/81
class myDropout(keras.layers.Dropout):
    def call(self, inputs, training=None):
        return super().call(inputs, training=True)  # Override training=True


# CUSTOM PRIOR AND POSTERIOR FUNCTIONS FOR THE VARIATIONAL LAYER
#  Code from https://keras.io/examples/keras_recipes/bayesian_neural_networks/
# The prior is defined as a normal distribution with zero mean and unit variance.
def prior(kernel_size, bias_size, dtype=None):
    n = kernel_size + bias_size
    prior_model = keras.Sequential(
        [
            tfp.layers.DistributionLambda(
                lambda t: tfp.distributions.MultivariateNormalDiag(
                    loc=tf.zeros(n), scale_diag=tf.ones(n)
                )
            )
        ]
    )
    return prior_model


# multivariate Gaussian distribution parametrized by a learnable parameters.
def posterior(kernel_size, bias_size, dtype=None):
    n = kernel_size + bias_size
    posterior_model = keras.Sequential(
        [
            tfp.layers.VariableLayer(
                tfp.layers.MultivariateNormalTriL.params_size(n), dtype=dtype
            ),
            tfp.layers.MultivariateNormalTriL(n),
        ]
    )
    return posterior_model

# =======================================
# PLOTTING FUNCTIONS
# =======================================

# TRAINING CURVES PLOT FUNCTION
def plot_results(history):
    """
    Plots the training and validation loss and accuracy from a Keras history object.
    Parameters:
    history (keras.callbacks.History): A History object returned by the fit method of a Keras model. 
                                       It contains the training and validation loss and accuracy for each epoch.
    Returns:
    None
    """
    
    val_loss = history.history['val_loss']
    acc = history.history['accuracy']
    loss = history.history['loss']
    val_acc = history.history['val_accuracy']
    
    plt.figure(figsize=(10,4))
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.plot(loss)
    plt.plot(val_loss)
    plt.legend(['Training','Validation'])

    plt.figure(figsize=(10,4))
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.plot(acc)
    plt.plot(val_acc)
    plt.legend(['Training','Validation'])

    plt.show()
